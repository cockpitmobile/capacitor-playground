// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nonprofit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
}

model TestActivity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  distance  Float
  duration  Float
  image     String
}

model User {
  id         String      @id @default(uuid())
  firstName  String?
  lastName   String?
  phone      String?
  email      String      @unique
  accessCode String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  badges     UserBadge[]
  Habit      Habit[]
}

model ActivityType {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  name       String
  imageUrl   String
  value      String
  isFeatured Boolean  @default(false)
}

model Badge {
  id                         String      @id @default(uuid())
  badge_name                 String
  badge_description          String
  badge_image_unlocked_url   String
  badge_image_locked_url     String
  badge_congrats_description String
  critera                    Json
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @default(now())
  users                      UserBadge[]
}

model HabitCompletedDates {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  habitId   String
  date      DateTime @default(now())
  Habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model Habit {
  id           String                @id @default(uuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now())
  userId       String
  name         String
  description  String?
  User         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  HabitDates   HabitCompletedDates[]
  habitRewards HabitReward[]
}

model UserBadge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  badgeId   String
  unlocked  Boolean
  Badge     Badge?   @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  name         String
  description  String
  imageUrl     String
  habitRewards HabitReward[]
}

model HabitReward {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  habitId   String
  rewardId  String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model Project {
  id                                    String    @id @default(uuid())
  title                                 String
  description                           String?
  start_date                            DateTime?
  estimated_end_time                    DateTime?
  type                                  String
  is_archived                           Boolean   @default(false)
  event_badge_logo                      String?
  race_distance                         Float?
  has_sent_25                           Boolean   @default(false)
  has_sent_50                           Boolean   @default(false)
  has_sent_75                           Boolean   @default(false)
  has_sent_all                          Boolean   @default(false)
  race_distance_units                   String?
  race_primary_color                    String
  race_secondary_color                  String
  race_event_type                       String
  event_details_link                    String?
  has_notified                          Boolean   @default(false)
  event_sign_up_link                    String?
  time_string                           String?
  config                                Json?
  race_banner_image_link                String?
  project_selfie_filter_image_link      String?
  cohort_data                           Json[]
  project_notification_info             Json?
  open_practice_time                    DateTime?
  next_season_project_id                String?
  onboarding_image_link                 String?
  onboarding_background_image_link      String?
  onboarding_background_image_dark_link String?
  accepted_activity_types               String[]
  default_page                          String?
  new_account_link                      String?
  app_welcome_text                      String?
  animation_body                        String?
  animation_function                    String?
  wrapup_image_html                     String?
}
